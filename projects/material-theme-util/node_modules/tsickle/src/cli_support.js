/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/cli_support", ["require", "exports", "tsickle/src/path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathToModuleName = exports.assertAbsolute = void 0;
    const path = require("tsickle/src/path");
    /**
     * asserts that the given fileName is an absolute path.
     *
     * The TypeScript API works in absolute paths, so we must be careful to resolve
     * paths before handing them over to TypeScript.
     */
    function assertAbsolute(fileName) {
        if (!path.isAbsolute(fileName)) {
            throw new Error(`expected ${JSON.stringify(fileName)} to be absolute`);
        }
    }
    exports.assertAbsolute = assertAbsolute;
    /**
     * Takes a context (ts.SourceFile.fileName of the current file) and the import URL of an ES6
     * import and generates a googmodule module name for the imported module.
     */
    function pathToModuleName(rootModulePath, context, fileName) {
        fileName = fileName.replace(/(\.d)?\.[tj]s$/, '');
        if (fileName[0] === '.') {
            // './foo' or '../foo'.
            // Resolve the path against the dirname of the current module.
            fileName = path.join(path.dirname(context), fileName);
        }
        // TODO(evanm): various tests assume they can import relative paths like
        // 'foo/bar' and have them interpreted as root-relative; preserve that here.
        // Fix this by removing the next line.
        if (!path.isAbsolute(fileName))
            fileName = path.join(rootModulePath, fileName);
        // TODO(evanm): various tests assume they can pass in a 'fileName' like
        // 'goog:foo.bar' and have this function do something reasonable.
        // For correctness, the above must have produced an absolute path.
        // assertAbsolute(fileName);
        if (rootModulePath) {
            fileName = path.relative(rootModulePath, fileName);
        }
        // Replace characters not supported by goog.module.
        const moduleName = fileName.replace(/\/|\\/g, '.').replace(/^[^a-zA-Z_$]/, '_').replace(/[^a-zA-Z0-9._$]/g, '_');
        return moduleName;
    }
    exports.pathToModuleName = pathToModuleName;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpX3N1cHBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpX3N1cHBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7O0lBRUgseUNBQStCO0lBRS9COzs7OztPQUtHO0lBQ0gsU0FBZ0IsY0FBYyxDQUFDLFFBQWdCO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0gsQ0FBQztJQUpELHdDQUlDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsZ0JBQWdCLENBQzVCLGNBQXNCLEVBQUUsT0FBZSxFQUFFLFFBQWdCO1FBQzNELFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUN2Qix1QkFBdUI7WUFDdkIsOERBQThEO1lBQzlELFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDdkQ7UUFFRCx3RUFBd0U7UUFDeEUsNEVBQTRFO1FBQzVFLHNDQUFzQztRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFL0UsdUVBQXVFO1FBQ3ZFLGlFQUFpRTtRQUVqRSxrRUFBa0U7UUFDbEUsNEJBQTRCO1FBRTVCLElBQUksY0FBYyxFQUFFO1lBQ2xCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNwRDtRQUVELG1EQUFtRDtRQUNuRCxNQUFNLFVBQVUsR0FDWixRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVsRyxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBOUJELDRDQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL3BhdGgnO1xuXG4vKipcbiAqIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gZmlsZU5hbWUgaXMgYW4gYWJzb2x1dGUgcGF0aC5cbiAqXG4gKiBUaGUgVHlwZVNjcmlwdCBBUEkgd29ya3MgaW4gYWJzb2x1dGUgcGF0aHMsIHNvIHdlIG11c3QgYmUgY2FyZWZ1bCB0byByZXNvbHZlXG4gKiBwYXRocyBiZWZvcmUgaGFuZGluZyB0aGVtIG92ZXIgdG8gVHlwZVNjcmlwdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEFic29sdXRlKGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgaWYgKCFwYXRoLmlzQWJzb2x1dGUoZmlsZU5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGZpbGVOYW1lKX0gdG8gYmUgYWJzb2x1dGVgKTtcbiAgfVxufVxuXG4vKipcbiAqIFRha2VzIGEgY29udGV4dCAodHMuU291cmNlRmlsZS5maWxlTmFtZSBvZiB0aGUgY3VycmVudCBmaWxlKSBhbmQgdGhlIGltcG9ydCBVUkwgb2YgYW4gRVM2XG4gKiBpbXBvcnQgYW5kIGdlbmVyYXRlcyBhIGdvb2dtb2R1bGUgbW9kdWxlIG5hbWUgZm9yIHRoZSBpbXBvcnRlZCBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRoVG9Nb2R1bGVOYW1lKFxuICAgIHJvb3RNb2R1bGVQYXRoOiBzdHJpbmcsIGNvbnRleHQ6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGZpbGVOYW1lID0gZmlsZU5hbWUucmVwbGFjZSgvKFxcLmQpP1xcLlt0al1zJC8sICcnKTtcblxuICBpZiAoZmlsZU5hbWVbMF0gPT09ICcuJykge1xuICAgIC8vICcuL2Zvbycgb3IgJy4uL2ZvbycuXG4gICAgLy8gUmVzb2x2ZSB0aGUgcGF0aCBhZ2FpbnN0IHRoZSBkaXJuYW1lIG9mIHRoZSBjdXJyZW50IG1vZHVsZS5cbiAgICBmaWxlTmFtZSA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUoY29udGV4dCksIGZpbGVOYW1lKTtcbiAgfVxuXG4gIC8vIFRPRE8oZXZhbm0pOiB2YXJpb3VzIHRlc3RzIGFzc3VtZSB0aGV5IGNhbiBpbXBvcnQgcmVsYXRpdmUgcGF0aHMgbGlrZVxuICAvLyAnZm9vL2JhcicgYW5kIGhhdmUgdGhlbSBpbnRlcnByZXRlZCBhcyByb290LXJlbGF0aXZlOyBwcmVzZXJ2ZSB0aGF0IGhlcmUuXG4gIC8vIEZpeCB0aGlzIGJ5IHJlbW92aW5nIHRoZSBuZXh0IGxpbmUuXG4gIGlmICghcGF0aC5pc0Fic29sdXRlKGZpbGVOYW1lKSkgZmlsZU5hbWUgPSBwYXRoLmpvaW4ocm9vdE1vZHVsZVBhdGgsIGZpbGVOYW1lKTtcblxuICAvLyBUT0RPKGV2YW5tKTogdmFyaW91cyB0ZXN0cyBhc3N1bWUgdGhleSBjYW4gcGFzcyBpbiBhICdmaWxlTmFtZScgbGlrZVxuICAvLyAnZ29vZzpmb28uYmFyJyBhbmQgaGF2ZSB0aGlzIGZ1bmN0aW9uIGRvIHNvbWV0aGluZyByZWFzb25hYmxlLlxuXG4gIC8vIEZvciBjb3JyZWN0bmVzcywgdGhlIGFib3ZlIG11c3QgaGF2ZSBwcm9kdWNlZCBhbiBhYnNvbHV0ZSBwYXRoLlxuICAvLyBhc3NlcnRBYnNvbHV0ZShmaWxlTmFtZSk7XG5cbiAgaWYgKHJvb3RNb2R1bGVQYXRoKSB7XG4gICAgZmlsZU5hbWUgPSBwYXRoLnJlbGF0aXZlKHJvb3RNb2R1bGVQYXRoLCBmaWxlTmFtZSk7XG4gIH1cblxuICAvLyBSZXBsYWNlIGNoYXJhY3RlcnMgbm90IHN1cHBvcnRlZCBieSBnb29nLm1vZHVsZS5cbiAgY29uc3QgbW9kdWxlTmFtZSA9XG4gICAgICBmaWxlTmFtZS5yZXBsYWNlKC9cXC98XFxcXC9nLCAnLicpLnJlcGxhY2UoL15bXmEtekEtWl8kXS8sICdfJykucmVwbGFjZSgvW15hLXpBLVowLTkuXyRdL2csICdfJyk7XG5cbiAgcmV0dXJuIG1vZHVsZU5hbWU7XG59XG4iXX0=