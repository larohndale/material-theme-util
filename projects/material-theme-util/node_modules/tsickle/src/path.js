/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/path", ["require", "exports", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalize = exports.relative = exports.dirname = exports.join = exports.isAbsolute = void 0;
    /**
     * @fileoverview Path manipulation functions.
     * These are the functions exposed by nodejs in the 'path' module.
     *
     * But we actually use the TypeScript path-manipulation logic because:
     * 1) we want the exact same behaviors as TS;
     * 2) we don't depend on node's 'path' module when running under a browser
     * So we poke into their private API for these.
     */
    const ts = require("typescript");
    function isAbsolute(path) {
        return ts.isRootedDiskPath(path);
    }
    exports.isAbsolute = isAbsolute;
    function join(p1, p2) {
        return ts.combinePaths(p1, p2);
    }
    exports.join = join;
    function dirname(path) {
        return ts.getDirectoryPath(path);
    }
    exports.dirname = dirname;
    function relative(base, rel) {
        return ts.convertToRelativePath(rel, base, p => p);
    }
    exports.relative = relative;
    function normalize(path) {
        return ts.resolvePath(path);
    }
    exports.normalize = normalize;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7OztJQUVIOzs7Ozs7OztPQVFHO0lBRUgsaUNBQWlDO0lBWWpDLFNBQWdCLFVBQVUsQ0FBQyxJQUFZO1FBQ3JDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFGRCxnQ0FFQztJQUVELFNBQWdCLElBQUksQ0FBQyxFQUFVLEVBQUUsRUFBVTtRQUN6QyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFGRCxvQkFFQztJQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO1FBQ2xDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFGRCwwQkFFQztJQUVELFNBQWdCLFFBQVEsQ0FBQyxJQUFZLEVBQUUsR0FBVztRQUNoRCxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUZELDRCQUVDO0lBRUQsU0FBZ0IsU0FBUyxDQUFDLElBQVk7UUFDcEMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFGRCw4QkFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFBhdGggbWFuaXB1bGF0aW9uIGZ1bmN0aW9ucy5cbiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIGV4cG9zZWQgYnkgbm9kZWpzIGluIHRoZSAncGF0aCcgbW9kdWxlLlxuICpcbiAqIEJ1dCB3ZSBhY3R1YWxseSB1c2UgdGhlIFR5cGVTY3JpcHQgcGF0aC1tYW5pcHVsYXRpb24gbG9naWMgYmVjYXVzZTpcbiAqIDEpIHdlIHdhbnQgdGhlIGV4YWN0IHNhbWUgYmVoYXZpb3JzIGFzIFRTO1xuICogMikgd2UgZG9uJ3QgZGVwZW5kIG9uIG5vZGUncyAncGF0aCcgbW9kdWxlIHdoZW4gcnVubmluZyB1bmRlciBhIGJyb3dzZXJcbiAqIFNvIHdlIHBva2UgaW50byB0aGVpciBwcml2YXRlIEFQSSBmb3IgdGhlc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmRlY2xhcmUgbW9kdWxlICd0eXBlc2NyaXB0JyB7XG4gIGZ1bmN0aW9uIGlzUm9vdGVkRGlza1BhdGgocGF0aDogc3RyaW5nKTogYm9vbGVhbjtcbiAgZnVuY3Rpb24gY29tYmluZVBhdGhzKC4uLnBhdGhzOiBzdHJpbmdbXSk6IHN0cmluZztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0b3J5UGF0aChwYXRoOiBzdHJpbmcpOiBzdHJpbmc7XG4gIGZ1bmN0aW9uIGNvbnZlcnRUb1JlbGF0aXZlUGF0aChcbiAgICAgIGFic29sdXRlT3JSZWxhdGl2ZVBhdGg6IHN0cmluZywgYmFzZVBhdGg6IHN0cmluZyxcbiAgICAgIGdldENhbm9uaWNhbEZpbGVOYW1lOiAocGF0aDogc3RyaW5nKSA9PiBzdHJpbmcpOiBzdHJpbmc7XG4gIGZ1bmN0aW9uIHJlc29sdmVQYXRoKHBhdGg6IHN0cmluZywgLi4ucGF0aHM6IEFycmF5PHN0cmluZ3x1bmRlZmluZWQ+KTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHRzLmlzUm9vdGVkRGlza1BhdGgocGF0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKHAxOiBzdHJpbmcsIHAyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gdHMuY29tYmluZVBhdGhzKHAxLCBwMik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJuYW1lKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0cy5nZXREaXJlY3RvcnlQYXRoKHBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmUoYmFzZTogc3RyaW5nLCByZWw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0cy5jb252ZXJ0VG9SZWxhdGl2ZVBhdGgocmVsLCBiYXNlLCBwID0+IHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0cy5yZXNvbHZlUGF0aChwYXRoKTtcbn1cbiJdfQ==